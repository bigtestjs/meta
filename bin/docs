#! /usr/bin/env node

const fs = require('fs');
const path = require('path');
const jsdoc = require('jsdoc-api');

const cwd = process.cwd();
const input = process.argv[2] || './src';
const output = process.argv[3] || './docs/data.json';

function removeCwd(path) {
  return path.replace(cwd, '');
}

function writeFile(filename, data) {
  let dir = path.dirname(filename);

  try {
    fs.statSync(dir);
  } catch (e) {
    fs.mkdirSync(dir);
  }

  fs.writeFileSync(filename, data);
}

function sortByClass(docs) {
  let classes = docs.filter((d) => d.kind === 'class');
  let byLongname = (a, b) => a.longname > b.longname ? 1 : -1;

  let groupedByClass = classes.map((c) => {
    return [c].concat(
      docs.filter((d) => d.memberof == c.longname && d.kind === 'member').sort(byLongname),
      docs.filter((d) => d.memberof == c.longname && d.kind !== 'member').sort(byLongname)
    );
  });

  let ungrouped = docs.filter((d) => !d.memberof && d.kind === 'function').sort(byLongname);

  let sorted = groupedByClass.concat(ungrouped).reduce((acc, val) => acc.concat(val), []);

  return sorted;
}

function generateDocs() {
  let docs = jsdoc.explainSync({
    files: path.join(cwd, `${input}/**/*.js`),
    configure: path.join(__dirname, '../jsdoc.config.json')
  }).filter((doc) => {
    // don't document undocumented docs...
    return !doc.undocumented &&
      // or private docs that don't belong to anything
      (doc.access !== 'private' || !!doc.memberof) &&
      // removes `package:undefined`
      (doc.kind !== 'package');
  }).map((doc) => {
    // remove cwd from file paths
    if (doc.meta && doc.meta.path) {
      doc.meta.path = removeCwd(doc.meta.path);
    }

    return doc;
  });

  docs = sortByClass(docs);

  writeFile(
    path.join(cwd, output),
    JSON.stringify(docs, null, 2)
  );
}

generateDocs();
